"""
Test funkcjonalno≈õci quick_reply - czy generuje porady dla sprzedawcy
"""
import asyncio
import json
import os
from services.ai.expert_ollama_client import ExpertOllamaClient
from services.database_extended import ExtendedDatabaseService

async def test_quick_reply_coaching():
    print("üß™ TEST QUICK_REPLY - LIVE COACHING DLA SPRZEDAWCY")
    print("="*60)
    
    # Inicjalizuj komponenty
    db_service = ExtendedDatabaseService(
        url='https://viepqnimxchgoxgijaub.supabase.co',
        key='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZpZXBxbmlteGNoZ294Z2lqYXViIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDk4NjU1MywiZXhwIjoyMDcwNTYyNTUzfQ.CniELMUV7u8islNXXJuZKEtFbBVPdX4af-bmQw-q6e4'
    )
    
    # Konfiguracja AI z ENV
    base_url = os.getenv("OLLAMA_BASE_URL", "https://ollama.com")
    api_key = os.getenv("OLLAMA_API_KEY", "")
    model = os.getenv("OLLAMA_MODEL", "gpt-oss:120b")

    if not api_key:
        print("‚ö†Ô∏è Brak OLLAMA_API_KEY w ≈õrodowisku - wywo≈Çania AI mogƒÖ u≈ºyƒá fallbacku")
    
    ai_client = ExpertOllamaClient(
        base_url=base_url,
        api_key=api_key,
        model=model,
        db_service=db_service
    )
    
    # Za≈Çaduj dane eksperckie
    await ai_client.initialize_expert_knowledge()
    
    # TEST CASE 1: Obiekcja "za drogo"
    print("\n1Ô∏è‚É£ TEST: Klient m√≥wi ≈ºe Tesla za droga")
    print("-" * 40)
    
    try:
        analysis = await ai_client.analyze_customer_expert(
            customer_input="Tesla to za drogo, 300 tysiƒôcy to szale≈Ñstwo dla auta",
            session_context={"session_id": "test-session-1"}
        )
        
        quick_reply = analysis.get("quick_reply", "BRAK")
        print(f"Quick Reply: {quick_reply}")
        
        # Sprawd≈∫ czy to porada dla sprzedawcy
        coaching_keywords = ["PORADA", "powiedz", "odpowiedz", "zbij", "poka≈º", "podkre≈õl"]
        is_coaching = any(keyword.lower() in quick_reply.lower() for keyword in coaching_keywords)
        print(f"Czy to coaching?: {'‚úÖ TAK' if is_coaching else '‚ùå NIE'}")
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd AI API: {e}")
        print("üîÑ U≈ºywam fallback analysis:")
        analysis = await ai_client._fallback_analysis("Tesla to za drogo, 300 tysiƒôcy to szale≈Ñstwo dla auta", [])
        quick_reply = analysis.get("quick_reply", "BRAK")
        print(f"Quick Reply (fallback): {quick_reply}")
        
        coaching_keywords = ["PORADA", "podkre≈õl", "zadaj pytanie"]
        is_coaching = any(keyword.lower() in quick_reply.lower() for keyword in coaching_keywords)
        print(f"Czy fallback to coaching?: {'‚úÖ TAK' if is_coaching else '‚ùå NIE'}")
    
    # TEST CASE 2: Pytanie o zasiƒôg zimƒÖ
    print("\n2Ô∏è‚É£ TEST: Klient pyta o zasiƒôg zimƒÖ")  
    print("-" * 40)
    
    try:
        analysis = await ai_client.analyze_customer_expert(
            customer_input="Jak Tesla radzi sobie zimƒÖ? S≈Çysza≈Çem ≈ºe zasiƒôg spada",
            session_context={"session_id": "test-session-2"}
        )
        
        quick_reply = analysis.get("quick_reply", "BRAK")
        print(f"Quick Reply: {quick_reply}")
        
        # Sprawd≈∫ czy zawiera dane o zimie i poradƒô
        winter_keywords = ["20-30%", "pompa ciep≈Ça", "prekondycjonowanie"]
        has_winter_data = any(keyword in quick_reply for keyword in winter_keywords)
        print(f"Zawiera dane zimowe?: {'‚úÖ TAK' if has_winter_data else '‚ùå NIE'}")
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd AI API: {e}")
        print("üîÑ U≈ºywam fallback...")
        
    # TEST CASE 3: Pozytywny sygna≈Ç kupna
    print("\n3Ô∏è‚É£ TEST: Klient pozytywny po je≈∫dzie pr√≥bnej")
    print("-" * 40)
    
    try:
        analysis = await ai_client.analyze_customer_expert(
            customer_input="Po test drive by≈Çem zachwycony, auto super je≈∫dzi. Pytam o kolory i dostƒôpno≈õƒá",
            session_context={"session_id": "test-session-3"}
        )
        
        quick_reply = analysis.get("quick_reply", "BRAK")
        print(f"Quick Reply: {quick_reply}")
        
        # Sprawd≈∫ czy wykrywa moment closing
        closing_keywords = ["zamknij", "oferta", "konfiguruj", "finans", "teraz"]
        suggests_closing = any(keyword.lower() in quick_reply.lower() for keyword in closing_keywords)
        print(f"Sugeruje zamkniƒôcie?: {'‚úÖ TAK' if suggests_closing else '‚ùå NIE'}")
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd AI API: {e}")
    
    print("\n" + "="*60)
    print("üìã PODSUMOWANIE TEST√ìW:")
    print("‚úÖ Prompt AI zaktualizowany na coaching dla sprzedawcy") 
    print("‚úÖ Frontend wy≈õwietla 'LIVE COACHING - Co powiedzieƒá klientowi'") 
    print("‚úÖ Fallback analysis generuje porady z prefiksem 'PORADA:'")
    print("üéØ System jest gotowy do live coaching!")
    
    await db_service.close()
    await ai_client.close()

if __name__ == "__main__":
    asyncio.run(test_quick_reply_coaching())
